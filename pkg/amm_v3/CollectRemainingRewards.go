// Code Generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectRemainingRewards is the `collectRemainingRewards` instruction.
type CollectRemainingRewards struct {
	RewardIndex *uint8

	// [0] = [SIGNER] rewardFunder
	//
	// [1] = [WRITE] funderTokenAccount
	//
	// [2] = [WRITE] poolState
	//
	// [3] = [] rewardTokenVault
	//
	// [4] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectRemainingRewardsInstructionBuilder creates a new `CollectRemainingRewards` instruction builder.
func NewCollectRemainingRewardsInstructionBuilder() *CollectRemainingRewards {
	nd := &CollectRemainingRewards{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetRewardIndex sets the "rewardIndex" parameter.
func (inst *CollectRemainingRewards) SetRewardIndex(rewardIndex uint8) *CollectRemainingRewards {
	inst.RewardIndex = &rewardIndex
	return inst
}

// SetRewardFunderAccount sets the "rewardFunder" account.
func (inst *CollectRemainingRewards) SetRewardFunderAccount(rewardFunder ag_solanago.PublicKey) *CollectRemainingRewards {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(rewardFunder).SIGNER()
	return inst
}

// GetRewardFunderAccount gets the "rewardFunder" account.
func (inst *CollectRemainingRewards) GetRewardFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFunderTokenAccountAccount sets the "funderTokenAccount" account.
func (inst *CollectRemainingRewards) SetFunderTokenAccountAccount(funderTokenAccount ag_solanago.PublicKey) *CollectRemainingRewards {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(funderTokenAccount).WRITE()
	return inst
}

// GetFunderTokenAccountAccount gets the "funderTokenAccount" account.
func (inst *CollectRemainingRewards) GetFunderTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "poolState" account.
func (inst *CollectRemainingRewards) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CollectRemainingRewards {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
func (inst *CollectRemainingRewards) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRewardTokenVaultAccount sets the "rewardTokenVault" account.
func (inst *CollectRemainingRewards) SetRewardTokenVaultAccount(rewardTokenVault ag_solanago.PublicKey) *CollectRemainingRewards {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rewardTokenVault)
	return inst
}

// GetRewardTokenVaultAccount gets the "rewardTokenVault" account.
func (inst *CollectRemainingRewards) GetRewardTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CollectRemainingRewards) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectRemainingRewards {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CollectRemainingRewards) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CollectRemainingRewards) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectRemainingRewards,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectRemainingRewards) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectRemainingRewards) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.RewardFunder is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FunderTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RewardTokenVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CollectRemainingRewards) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectRemainingRewards")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RewardIndex", *inst.RewardIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    rewardFunder", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     funderToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       poolState", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("rewardTokenVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CollectRemainingRewards) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CollectRemainingRewards) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewCollectRemainingRewardsInstruction declares a new CollectRemainingRewards instruction with the provided parameters and accounts.
func NewCollectRemainingRewardsInstruction(
	// Parameters:
	rewardIndex uint8,
	// Accounts:
	rewardFunder ag_solanago.PublicKey,
	funderTokenAccount ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	rewardTokenVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CollectRemainingRewards {
	return NewCollectRemainingRewardsInstructionBuilder().
		SetRewardIndex(rewardIndex).
		SetRewardFunderAccount(rewardFunder).
		SetFunderTokenAccountAccount(funderTokenAccount).
		SetPoolStateAccount(poolState).
		SetRewardTokenVaultAccount(rewardTokenVault).
		SetTokenProgramAccount(tokenProgram)
}
