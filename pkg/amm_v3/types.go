// Code Generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type InitializeRewardParam struct {
	OpenTime              uint64
	EndTime               uint64
	EmissionsPerSecondX64 ag_binary.Uint128
}

func (obj InitializeRewardParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeRewardParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	return nil
}

type Observation struct {
	BlockTimestamp         uint32
	SqrtPriceX64           ag_binary.Uint128
	CumulativeTimePriceX64 ag_binary.Uint128
	Padding                ag_binary.Uint128
}

func (obj Observation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BlockTimestamp` param:
	err = encoder.Encode(obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceX64` param:
	err = encoder.Encode(obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Serialize `CumulativeTimePriceX64` param:
	err = encoder.Encode(obj.CumulativeTimePriceX64)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Observation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BlockTimestamp`:
	err = decoder.Decode(&obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceX64`:
	err = decoder.Decode(&obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeTimePriceX64`:
	err = decoder.Decode(&obj.CumulativeTimePriceX64)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PositionRewardInfo struct {
	GrowthInsideLastX64 ag_binary.Uint128
	RewardAmountOwed    uint64
}

func (obj PositionRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `GrowthInsideLastX64` param:
	err = encoder.Encode(obj.GrowthInsideLastX64)
	if err != nil {
		return err
	}
	// Serialize `RewardAmountOwed` param:
	err = encoder.Encode(obj.RewardAmountOwed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `GrowthInsideLastX64`:
	err = decoder.Decode(&obj.GrowthInsideLastX64)
	if err != nil {
		return err
	}
	// Deserialize `RewardAmountOwed`:
	err = decoder.Decode(&obj.RewardAmountOwed)
	if err != nil {
		return err
	}
	return nil
}

type RewardInfo struct {
	RewardState           uint8
	OpenTime              uint64
	EndTime               uint64
	LastUpdateTime        uint64
	EmissionsPerSecondX64 ag_binary.Uint128
	RewardTotalEmissioned uint64
	RewardClaimed         uint64
	TokenMint             ag_solanago.PublicKey
	TokenVault            ag_solanago.PublicKey
	Authority             ag_solanago.PublicKey
	RewardGrowthGlobalX64 ag_binary.Uint128
}

func (obj RewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardState` param:
	err = encoder.Encode(obj.RewardState)
	if err != nil {
		return err
	}
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTime` param:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Serialize `RewardTotalEmissioned` param:
	err = encoder.Encode(obj.RewardTotalEmissioned)
	if err != nil {
		return err
	}
	// Serialize `RewardClaimed` param:
	err = encoder.Encode(obj.RewardClaimed)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenVault` param:
	err = encoder.Encode(obj.TokenVault)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `RewardGrowthGlobalX64` param:
	err = encoder.Encode(obj.RewardGrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardState`:
	err = decoder.Decode(&obj.RewardState)
	if err != nil {
		return err
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Deserialize `RewardTotalEmissioned`:
	err = decoder.Decode(&obj.RewardTotalEmissioned)
	if err != nil {
		return err
	}
	// Deserialize `RewardClaimed`:
	err = decoder.Decode(&obj.RewardClaimed)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault`:
	err = decoder.Decode(&obj.TokenVault)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `RewardGrowthGlobalX64`:
	err = decoder.Decode(&obj.RewardGrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

type TickState struct {
	Tick                    int32
	LiquidityNet            ag_binary.Int128
	LiquidityGross          ag_binary.Uint128
	FeeGrowthOutside0X64    ag_binary.Uint128
	FeeGrowthOutside1X64    ag_binary.Uint128
	RewardGrowthsOutsideX64 [3]ag_binary.Uint128
	Padding                 [13]uint32
}

func (obj TickState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tick` param:
	err = encoder.Encode(obj.Tick)
	if err != nil {
		return err
	}
	// Serialize `LiquidityNet` param:
	err = encoder.Encode(obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Serialize `LiquidityGross` param:
	err = encoder.Encode(obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutside0X64` param:
	err = encoder.Encode(obj.FeeGrowthOutside0X64)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutside1X64` param:
	err = encoder.Encode(obj.FeeGrowthOutside1X64)
	if err != nil {
		return err
	}
	// Serialize `RewardGrowthsOutsideX64` param:
	err = encoder.Encode(obj.RewardGrowthsOutsideX64)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TickState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tick`:
	err = decoder.Decode(&obj.Tick)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityNet`:
	err = decoder.Decode(&obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityGross`:
	err = decoder.Decode(&obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutside0X64`:
	err = decoder.Decode(&obj.FeeGrowthOutside0X64)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutside1X64`:
	err = decoder.Decode(&obj.FeeGrowthOutside1X64)
	if err != nil {
		return err
	}
	// Deserialize `RewardGrowthsOutsideX64`:
	err = decoder.Decode(&obj.RewardGrowthsOutsideX64)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type PoolStatusBitIndex ag_binary.BorshEnum

const (
	PoolStatusBitIndexOpenPositionOrIncreaseLiquidity PoolStatusBitIndex = iota
	PoolStatusBitIndexDecreaseLiquidity
	PoolStatusBitIndexCollectFee
	PoolStatusBitIndexCollectReward
	PoolStatusBitIndexSwap
)

func (value PoolStatusBitIndex) String() string {
	switch value {
	case PoolStatusBitIndexOpenPositionOrIncreaseLiquidity:
		return "OpenPositionOrIncreaseLiquidity"
	case PoolStatusBitIndexDecreaseLiquidity:
		return "DecreaseLiquidity"
	case PoolStatusBitIndexCollectFee:
		return "CollectFee"
	case PoolStatusBitIndexCollectReward:
		return "CollectReward"
	case PoolStatusBitIndexSwap:
		return "Swap"
	default:
		return ""
	}
}

type PoolStatusBitFlag ag_binary.BorshEnum

const (
	PoolStatusBitFlagEnable PoolStatusBitFlag = iota
	PoolStatusBitFlagDisable
)

func (value PoolStatusBitFlag) String() string {
	switch value {
	case PoolStatusBitFlagEnable:
		return "Enable"
	case PoolStatusBitFlagDisable:
		return "Disable"
	default:
		return ""
	}
}

type RewardState ag_binary.BorshEnum

const (
	RewardStateUninitialized RewardState = iota
	RewardStateInitialized
	RewardStateOpening
	RewardStateEnded
)

func (value RewardState) String() string {
	switch value {
	case RewardStateUninitialized:
		return "Uninitialized"
	case RewardStateInitialized:
		return "Initialized"
	case RewardStateOpening:
		return "Opening"
	case RewardStateEnded:
		return "Ended"
	default:
		return ""
	}
}
