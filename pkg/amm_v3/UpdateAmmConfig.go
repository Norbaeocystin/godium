// Code Generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateAmmConfig is the `updateAmmConfig` instruction.
type UpdateAmmConfig struct {
	Param *uint8
	Value *uint32

	// [0] = [SIGNER] owner
	//
	// [1] = [WRITE] ammConfig
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateAmmConfigInstructionBuilder creates a new `UpdateAmmConfig` instruction builder.
func NewUpdateAmmConfigInstructionBuilder() *UpdateAmmConfig {
	nd := &UpdateAmmConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetParam sets the "param" parameter.
func (inst *UpdateAmmConfig) SetParam(param uint8) *UpdateAmmConfig {
	inst.Param = &param
	return inst
}

// SetValue sets the "value" parameter.
func (inst *UpdateAmmConfig) SetValue(value uint32) *UpdateAmmConfig {
	inst.Value = &value
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *UpdateAmmConfig) SetOwnerAccount(owner ag_solanago.PublicKey) *UpdateAmmConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *UpdateAmmConfig) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmConfigAccount sets the "ammConfig" account.
func (inst *UpdateAmmConfig) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *UpdateAmmConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ammConfig).WRITE()
	return inst
}

// GetAmmConfigAccount gets the "ammConfig" account.
func (inst *UpdateAmmConfig) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateAmmConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateAmmConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateAmmConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateAmmConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Param == nil {
			return errors.New("Param parameter is not set")
		}
		if inst.Value == nil {
			return errors.New("Value parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
	}
	return nil
}

func (inst *UpdateAmmConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateAmmConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Param", *inst.Param))
						paramsBranch.Child(ag_format.Param("Value", *inst.Value))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("ammConfig", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateAmmConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Param` param:
	err = encoder.Encode(obj.Param)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateAmmConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Param`:
	err = decoder.Decode(&obj.Param)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateAmmConfigInstruction declares a new UpdateAmmConfig instruction with the provided parameters and accounts.
func NewUpdateAmmConfigInstruction(
	// Parameters:
	param uint8,
	value uint32,
	// Accounts:
	owner ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey) *UpdateAmmConfig {
	return NewUpdateAmmConfigInstructionBuilder().
		SetParam(param).
		SetValue(value).
		SetOwnerAccount(owner).
		SetAmmConfigAccount(ammConfig)
}
