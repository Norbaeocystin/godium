// Code Generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "AmmV3"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_CreateAmmConfig = ag_binary.TypeID([8]byte{137, 52, 237, 212, 215, 117, 108, 104})

	Instruction_UpdateAmmConfig = ag_binary.TypeID([8]byte{49, 60, 174, 136, 154, 28, 116, 200})

	Instruction_CreatePool = ag_binary.TypeID([8]byte{233, 146, 209, 142, 207, 104, 64, 188})

	Instruction_CreateOperationAccount = ag_binary.TypeID([8]byte{63, 87, 148, 33, 109, 35, 8, 104})

	Instruction_UpdateOperationAccount = ag_binary.TypeID([8]byte{127, 70, 119, 40, 188, 227, 61, 7})

	Instruction_ResetSqrtPrice = ag_binary.TypeID([8]byte{36, 83, 233, 182, 194, 87, 47, 31})

	Instruction_InitializeReward = ag_binary.TypeID([8]byte{95, 135, 192, 196, 242, 129, 230, 68})

	Instruction_CollectRemainingRewards = ag_binary.TypeID([8]byte{18, 237, 166, 197, 34, 16, 213, 144})

	Instruction_UpdateRewardInfos = ag_binary.TypeID([8]byte{163, 172, 224, 52, 11, 154, 106, 223})

	Instruction_SetRewardParams = ag_binary.TypeID([8]byte{112, 52, 167, 75, 32, 201, 211, 137})

	Instruction_CollectProtocolFee = ag_binary.TypeID([8]byte{136, 136, 252, 221, 194, 66, 126, 89})

	Instruction_CollectFundFee = ag_binary.TypeID([8]byte{167, 138, 78, 149, 223, 194, 6, 126})

	Instruction_OpenPosition = ag_binary.TypeID([8]byte{135, 128, 47, 77, 15, 152, 240, 49})

	Instruction_ClosePosition = ag_binary.TypeID([8]byte{123, 134, 81, 0, 49, 68, 98, 98})

	Instruction_IncreaseLiquidity = ag_binary.TypeID([8]byte{46, 156, 243, 118, 13, 205, 251, 178})

	Instruction_DecreaseLiquidity = ag_binary.TypeID([8]byte{160, 38, 208, 111, 104, 91, 44, 1})

	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	Instruction_SwapRouterBaseIn = ag_binary.TypeID([8]byte{69, 125, 115, 218, 245, 186, 242, 196})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateAmmConfig:
		return "CreateAmmConfig"
	case Instruction_UpdateAmmConfig:
		return "UpdateAmmConfig"
	case Instruction_CreatePool:
		return "CreatePool"
	case Instruction_CreateOperationAccount:
		return "CreateOperationAccount"
	case Instruction_UpdateOperationAccount:
		return "UpdateOperationAccount"
	case Instruction_ResetSqrtPrice:
		return "ResetSqrtPrice"
	case Instruction_InitializeReward:
		return "InitializeReward"
	case Instruction_CollectRemainingRewards:
		return "CollectRemainingRewards"
	case Instruction_UpdateRewardInfos:
		return "UpdateRewardInfos"
	case Instruction_SetRewardParams:
		return "SetRewardParams"
	case Instruction_CollectProtocolFee:
		return "CollectProtocolFee"
	case Instruction_CollectFundFee:
		return "CollectFundFee"
	case Instruction_OpenPosition:
		return "OpenPosition"
	case Instruction_ClosePosition:
		return "ClosePosition"
	case Instruction_IncreaseLiquidity:
		return "IncreaseLiquidity"
	case Instruction_DecreaseLiquidity:
		return "DecreaseLiquidity"
	case Instruction_Swap:
		return "Swap"
	case Instruction_SwapRouterBaseIn:
		return "SwapRouterBaseIn"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_amm_config", (*CreateAmmConfig)(nil),
		},
		{
			"update_amm_config", (*UpdateAmmConfig)(nil),
		},
		{
			"create_pool", (*CreatePool)(nil),
		},
		{
			"create_operation_account", (*CreateOperationAccount)(nil),
		},
		{
			"update_operation_account", (*UpdateOperationAccount)(nil),
		},
		{
			"reset_sqrt_price", (*ResetSqrtPrice)(nil),
		},
		{
			"initialize_reward", (*InitializeReward)(nil),
		},
		{
			"collect_remaining_rewards", (*CollectRemainingRewards)(nil),
		},
		{
			"update_reward_infos", (*UpdateRewardInfos)(nil),
		},
		{
			"set_reward_params", (*SetRewardParams)(nil),
		},
		{
			"collect_protocol_fee", (*CollectProtocolFee)(nil),
		},
		{
			"collect_fund_fee", (*CollectFundFee)(nil),
		},
		{
			"open_position", (*OpenPosition)(nil),
		},
		{
			"close_position", (*ClosePosition)(nil),
		},
		{
			"increase_liquidity", (*IncreaseLiquidity)(nil),
		},
		{
			"decrease_liquidity", (*DecreaseLiquidity)(nil),
		},
		{
			"swap", (*Swap)(nil),
		},
		{
			"swap_router_base_in", (*SwapRouterBaseIn)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
