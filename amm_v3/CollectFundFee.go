// Code Generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectFundFee is the `collectFundFee` instruction.
type CollectFundFee struct {
	Amount0Requested *uint64
	Amount1Requested *uint64

	// [0] = [SIGNER] owner
	//
	// [1] = [WRITE] poolState
	//
	// [2] = [] ammConfig
	//
	// [3] = [WRITE] tokenVault0
	//
	// [4] = [WRITE] tokenVault1
	//
	// [5] = [WRITE] recipientTokenAccount0
	//
	// [6] = [WRITE] recipientTokenAccount1
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectFundFeeInstructionBuilder creates a new `CollectFundFee` instruction builder.
func NewCollectFundFeeInstructionBuilder() *CollectFundFee {
	nd := &CollectFundFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetAmount0Requested sets the "amount0Requested" parameter.
func (inst *CollectFundFee) SetAmount0Requested(amount0Requested uint64) *CollectFundFee {
	inst.Amount0Requested = &amount0Requested
	return inst
}

// SetAmount1Requested sets the "amount1Requested" parameter.
func (inst *CollectFundFee) SetAmount1Requested(amount1Requested uint64) *CollectFundFee {
	inst.Amount1Requested = &amount1Requested
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *CollectFundFee) SetOwnerAccount(owner ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CollectFundFee) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolStateAccount sets the "poolState" account.
func (inst *CollectFundFee) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
func (inst *CollectFundFee) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmConfigAccount sets the "ammConfig" account.
func (inst *CollectFundFee) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "ammConfig" account.
func (inst *CollectFundFee) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenVault0Account sets the "tokenVault0" account.
func (inst *CollectFundFee) SetTokenVault0Account(tokenVault0 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenVault0).WRITE()
	return inst
}

// GetTokenVault0Account gets the "tokenVault0" account.
func (inst *CollectFundFee) GetTokenVault0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenVault1Account sets the "tokenVault1" account.
func (inst *CollectFundFee) SetTokenVault1Account(tokenVault1 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenVault1).WRITE()
	return inst
}

// GetTokenVault1Account gets the "tokenVault1" account.
func (inst *CollectFundFee) GetTokenVault1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRecipientTokenAccount0Account sets the "recipientTokenAccount0" account.
func (inst *CollectFundFee) SetRecipientTokenAccount0Account(recipientTokenAccount0 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(recipientTokenAccount0).WRITE()
	return inst
}

// GetRecipientTokenAccount0Account gets the "recipientTokenAccount0" account.
func (inst *CollectFundFee) GetRecipientTokenAccount0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRecipientTokenAccount1Account sets the "recipientTokenAccount1" account.
func (inst *CollectFundFee) SetRecipientTokenAccount1Account(recipientTokenAccount1 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(recipientTokenAccount1).WRITE()
	return inst
}

// GetRecipientTokenAccount1Account gets the "recipientTokenAccount1" account.
func (inst *CollectFundFee) GetRecipientTokenAccount1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CollectFundFee) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CollectFundFee) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CollectFundFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectFundFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectFundFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectFundFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount0Requested == nil {
			return errors.New("Amount0Requested parameter is not set")
		}
		if inst.Amount1Requested == nil {
			return errors.New("Amount1Requested parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenVault0 is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenVault1 is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RecipientTokenAccount0 is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RecipientTokenAccount1 is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CollectFundFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectFundFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount0Requested", *inst.Amount0Requested))
						paramsBranch.Child(ag_format.Param("Amount1Requested", *inst.Amount1Requested))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             poolState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             ammConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           tokenVault0", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           tokenVault1", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("recipientTokenAccount0", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("recipientTokenAccount1", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CollectFundFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount0Requested` param:
	err = encoder.Encode(obj.Amount0Requested)
	if err != nil {
		return err
	}
	// Serialize `Amount1Requested` param:
	err = encoder.Encode(obj.Amount1Requested)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CollectFundFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount0Requested`:
	err = decoder.Decode(&obj.Amount0Requested)
	if err != nil {
		return err
	}
	// Deserialize `Amount1Requested`:
	err = decoder.Decode(&obj.Amount1Requested)
	if err != nil {
		return err
	}
	return nil
}

// NewCollectFundFeeInstruction declares a new CollectFundFee instruction with the provided parameters and accounts.
func NewCollectFundFeeInstruction(
	// Parameters:
	amount0Requested uint64,
	amount1Requested uint64,
	// Accounts:
	owner ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	tokenVault0 ag_solanago.PublicKey,
	tokenVault1 ag_solanago.PublicKey,
	recipientTokenAccount0 ag_solanago.PublicKey,
	recipientTokenAccount1 ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CollectFundFee {
	return NewCollectFundFeeInstructionBuilder().
		SetAmount0Requested(amount0Requested).
		SetAmount1Requested(amount1Requested).
		SetOwnerAccount(owner).
		SetPoolStateAccount(poolState).
		SetAmmConfigAccount(ammConfig).
		SetTokenVault0Account(tokenVault0).
		SetTokenVault1Account(tokenVault1).
		SetRecipientTokenAccount0Account(recipientTokenAccount0).
		SetRecipientTokenAccount1Account(recipientTokenAccount1).
		SetTokenProgramAccount(tokenProgram)
}
