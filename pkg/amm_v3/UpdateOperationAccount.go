// Code Generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package amm_v3

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateOperationAccount is the `updateOperationAccount` instruction.
type UpdateOperationAccount struct {
	Param *uint8
	Keys  *[]ag_solanago.PublicKey

	// [0] = [SIGNER] owner
	//
	// [1] = [WRITE] operationState
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateOperationAccountInstructionBuilder creates a new `UpdateOperationAccount` instruction builder.
func NewUpdateOperationAccountInstructionBuilder() *UpdateOperationAccount {
	nd := &UpdateOperationAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetParam sets the "param" parameter.
func (inst *UpdateOperationAccount) SetParam(param uint8) *UpdateOperationAccount {
	inst.Param = &param
	return inst
}

// SetKeys sets the "keys" parameter.
func (inst *UpdateOperationAccount) SetKeys(keys []ag_solanago.PublicKey) *UpdateOperationAccount {
	inst.Keys = &keys
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *UpdateOperationAccount) SetOwnerAccount(owner ag_solanago.PublicKey) *UpdateOperationAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *UpdateOperationAccount) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOperationStateAccount sets the "operationState" account.
func (inst *UpdateOperationAccount) SetOperationStateAccount(operationState ag_solanago.PublicKey) *UpdateOperationAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(operationState).WRITE()
	return inst
}

// GetOperationStateAccount gets the "operationState" account.
func (inst *UpdateOperationAccount) GetOperationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateOperationAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateOperationAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateOperationAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateOperationAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateOperationAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateOperationAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateOperationAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Param == nil {
			return errors.New("Param parameter is not set")
		}
		if inst.Keys == nil {
			return errors.New("Keys parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OperationState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateOperationAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateOperationAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Param", *inst.Param))
						paramsBranch.Child(ag_format.Param(" Keys", *inst.Keys))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("operationState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateOperationAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Param` param:
	err = encoder.Encode(obj.Param)
	if err != nil {
		return err
	}
	// Serialize `Keys` param:
	err = encoder.Encode(obj.Keys)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateOperationAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Param`:
	err = decoder.Decode(&obj.Param)
	if err != nil {
		return err
	}
	// Deserialize `Keys`:
	err = decoder.Decode(&obj.Keys)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateOperationAccountInstruction declares a new UpdateOperationAccount instruction with the provided parameters and accounts.
func NewUpdateOperationAccountInstruction(
	// Parameters:
	param uint8,
	keys []ag_solanago.PublicKey,
	// Accounts:
	owner ag_solanago.PublicKey,
	operationState ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpdateOperationAccount {
	return NewUpdateOperationAccountInstructionBuilder().
		SetParam(param).
		SetKeys(keys).
		SetOwnerAccount(owner).
		SetOperationStateAccount(operationState).
		SetSystemProgramAccount(systemProgram)
}
